{"version":3,"sources":["img/logo.png","config/firebase.js","views/Login.js","views/SignIn.js","views/PrincipalPage.js","components/HomeOver.js","containers/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Login","className","placeholder","to","SignIn","PrincipalPage","id","Home","class","src","Logo","alt","Component","useState","loading","setLoading","setTimeout","Container","App","firestore","collection","doc","get","then","console","log","data","catch","error","basename","process","Fragment","exact","from","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,kC,8PCazCC,gBAXmB,CACjBC,OAAQ,0CACRC,WAAY,gCACZC,YAAa,uCACbC,UAAW,gBACXC,cAAe,4BACfC,kBAAmB,cACnBC,MAAO,2CACPC,cAAe,iBAKFR,QCmBFS,G,MA1BD,WACV,OACI,yBAAKC,UAAU,SACX,yBAAKA,UAAU,cACX,0DAEJ,8BACA,2BAAOC,YAAY,uBACnB,2BAAOA,YAAY,mBAEnB,6BACA,kBAAC,IAAD,CAAMC,GAAG,kBACL,4BAAQF,UAAU,YAAlB,uBAEJ,kBAAC,IAAD,CAAME,GAAG,WACT,4BAAQF,UAAU,aAAlB,iBAEA,kBAAC,IAAD,CAAME,GAAG,kBACT,4BAAQF,UAAU,aAAlB,WAEA,kECdGG,EAXA,WACX,OACI,yBAAKH,UAAU,kBACX,uCACA,kBAAC,IAAD,CAAME,GAAG,UACT,4BAAQF,UAAU,aAAlB,eCSGI,EAZQ,WAErB,OACE,yBAAKC,GAAG,iBACR,6DACA,kBAAC,IAAD,CAAMH,GAAG,UACD,4BAAQF,UAAU,aAAlB,e,yECEKM,E,iLAPb,OACI,yBAAKC,MAAM,YACP,yBAAKC,IAAOC,IAAOC,IAAI,aAAaV,UAAU,mB,GAJvCW,a,QC0BJL,G,MAxBF,WAAO,IAAD,EAEeM,oBAAS,GAFxB,mBAERC,EAFQ,KAECC,EAFD,KAQf,OAJAC,YAAY,WACRD,GAAW,KACb,MAGE,yBAAKd,UAAU,kBACTa,EAEM,kBAACG,EAAA,EAAD,KACI,kBAAC,EAAD,OAGJ,yBAAKhB,UAAU,WACX,kBAAC,EAAD,UCuBTiB,EAnCL,WAUR,OARW3B,EAAS4B,YACFC,WAAW,WAAWC,IAAI,wBACrCC,MAAMC,MAAK,SAASF,GACzBG,QAAQC,IAAI,wBAAyBJ,EAAIK,WACxCC,OAAM,SAASC,GAChBJ,QAAQC,IAAI,0BAA2BG,MAIvC,kBAAC,IAAD,CAAQC,SAAUC,6BAChB,kBAAC,IAAMC,SAAP,KACE,kBAAC,IAAD,CACIC,OAAK,EACLC,KAAK,IACL9B,GAAG,UACL,kBAAC,IAAD,KACE,kBAAC,IAAD,CACE+B,KAAK,QACLC,UAAW5B,IACX,kBAAC,IAAD,CACA2B,KAAK,SACLC,UAAWnC,IACX,kBAAC,IAAD,CACAkC,KAAK,UACLC,UAAW/B,IACX,kBAAC,IAAD,CACA8B,KAAK,iBACLC,UAAW9B,QC5BL+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACT,kBAAC,IAAD,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDuHlB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,MAAK,SAAAyB,GACjCA,EAAaC,kB","file":"static/js/main.85d3c022.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.7413a6b1.png\";","import * as firebase from 'firebase'\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyDQbAtxq4hFCvLfq8Xk6mEqPv_hraqUlXc\",\r\n    authDomain: \"sodimac-fe7fd.firebaseapp.com\",\r\n    databaseURL: \"https://sodimac-fe7fd.firebaseio.com\",\r\n    projectId: \"sodimac-fe7fd\",\r\n    storageBucket: \"sodimac-fe7fd.appspot.com\",\r\n    messagingSenderId: \"92287007928\",\r\n    appId: \"1:92287007928:web:10adefd3e37d40c8f3084d\",\r\n    measurementId: \"G-1QQSCMXWL6\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\n  export default firebase;","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\n//import { Button } from 'reactstrap';\r\nimport './Login.css'\r\n\r\n//import SignIn from './views/SignIn';\r\n//import PrincipalPage from './views/PrincipalPage';\r\n\r\nconst Login = () => {\r\n    return (\r\n        <div className=\"Login\">\r\n            <div className=\"titleLogin\">\r\n                <h1>¡Bienvenido a Sodimac!</h1>\r\n            </div>\r\n            <form>\r\n            <input placeholder=\"correo electronico\"></input>\r\n            <input placeholder=\"contraseña\"></input>\r\n            </form>\r\n            <div>\r\n            <Link to=\"/PrincipalPage\">\r\n                <button className=\"btnLogin\"> Iniciar sesión</button>\r\n            </Link>\r\n            <Link to=\"/SignIn\">\r\n            <button className=\"btnSignIn\" >Crear cuenta</button>\r\n            </Link>\r\n            <Link to=\"/PrincipalPage\">\r\n            <button className=\"btnSignIn\" >Omitir</button>\r\n            </Link>\r\n            <p>¿Olvidaste tu contraseña?</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst SignIn = () => {\r\n    return (\r\n        <div className=\"home col-md-12\">\r\n            <h1>Sign In</h1>\r\n            <Link to=\"/Login\">\r\n            <button className=\"btnSignIn\" >regresar</button>\r\n    </Link>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SignIn;\r\n","import React from 'react';\r\nimport {Link} from \"react-router-dom\";\r\n\r\n\r\n// vista incial, donde se va a crear el juego\r\nconst PrincipalPage  = () => {\r\n\r\n  return (\r\n    <div id=\"outer-section\">\r\n    <h1> estoy en la pagina principal</h1>\r\n    <Link to=\"/Login\">\r\n            <button className=\"btnSignIn\" >regresar</button>\r\n    </Link>\r\n    </div>   \r\n  );\r\n};\r\n\r\nexport default PrincipalPage;","import React, { Component } from \"react\";\r\nimport './HomeOver.css'\r\nimport Logo  from '../img/logo.png'\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    return (\r\n        <div class=\"homeOver\">\r\n            <img src= { Logo } alt=\"Big Burger\" className=\"bigBurger\"></img>        \r\n        </div>\r\n    )\r\n  }}\r\n\r\n  export default Home;","import React, { useState } from 'react';\r\nimport HomeOver from '../components/HomeOver';\r\nimport { Container} from 'reactstrap';\r\nimport './Home.css';\r\nimport Login from '../views/Login';\r\n\r\nconst Home = () => {\r\n\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    setTimeout( () => {\r\n        setLoading(false);\r\n    },1200);\r\n\r\n    return (\r\n        <div className=\"home col-md-12\">\r\n            { loading\r\n                ?\r\n                    <Container>\r\n                        <HomeOver />\r\n                    </Container>\r\n                :\r\n                    <div className=\"options\">\r\n                        <Login/>\r\n                    </div>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Route, Redirect, Switch } from \"react-router-dom\";\r\nimport firebase from './config/firebase'\r\n\r\n//importando las vistas\r\nimport Login from './views/Login';\r\nimport SignIn from './views/SignIn';\r\nimport PrincipalPage from './views/PrincipalPage';\r\nimport Home from './containers/Home';\r\n\r\nconst App=()=> {\r\n\r\n  const db = firebase.firestore();\r\n  const docRef = db.collection(\"sodimac\").doc(\"ArQYrzeC1yVXp1z24xTt\");\r\n  docRef.get().then(function(doc) {\r\n    console.log(\"documento de firebase\", doc.data()) \r\n  }).catch(function(error) {\r\n    console.log(\"Error getting document:\", error);\r\n  });\r\n  \r\n  return (\r\n    <Router basename={process.env.PUBLIC_URL}>\r\n      <React.Fragment>\r\n        <Redirect\r\n            exact\r\n            from=\"/\"\r\n            to=\"/Home\" />\r\n          <Switch>\r\n            <Route\r\n              path=\"/Home\"\r\n              component={Home} />\r\n              <Route\r\n              path=\"/Login\"\r\n              component={Login} />\r\n              <Route\r\n              path=\"/SignIn\"\r\n              component={SignIn} />\r\n              <Route\r\n              path=\"/PrincipalPage\"\r\n              component={PrincipalPage} />\r\n          </Switch>\r\n        </React.Fragment>\r\n      </Router>\r\n  );\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n<Router>\r\n    <App />\r\n</Router>, \r\ndocument.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}